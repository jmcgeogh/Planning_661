#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Feb 17 21:15:55 2021

@author: elliottmcg
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Feb 15 14:04:59 2021

@author: elliottmcg
"""

import numpy as np
import time
import copy

start_time = time.time()
initial_state1 = [[1, 2, 3, 4],[ 5, 6,0, 8], [9, 10, 7, 12] , [13, 14, 11, 15]]
initial_state2 = [[1, 0, 3, 4],[ 5, 2, 7, 8], [9, 6, 10, 11] , [13, 14, 15, 12]]
initial_state3 = [[0, 2, 3, 4],[ 1,5, 7, 8], [9, 6, 11, 12] , [13, 10, 14, 15]]
initial_state4 = [[5, 1, 2, 3],[0,6, 7, 4], [9, 10, 11, 8] , [13, 14, 15, 12]]
initial_state5 = [[1, 6, 2, 3], [9,5, 7, 4], [0, 10, 11, 8] , [13, 14, 15, 12]]
initial_state = initial_state3
end_state = '010203040506070809101112131415__'
current = initial_state
storage = [] # store new configs
tree = {} # dict for bfs
state = 1 # lable for new config
count = 0 # current dict {key}
state_num = ''

def convert(node):
    string = ''
    for a in range(len(current)):
        for b in range(len(current)):
            if current[a][b] == 0:
                string = string + '__'
            else:
                if current[a][b] < 10:
                    char = '0' + str(current[a][b])
                    string = string + char
                else:
                    char = str(current[a][b])
                    string = string + char
    return string

storage.append(convert(current))

def blank_loc(string):
    for i in range(0, len(string), 2):
        num = string[i] + string[i+1]
        if num == '__':
            blank = [i, i+1]
    return blank

def dup(node):
    for i in range(len(storage)):
        if node == storage[i]:
            return 0
        else:
            return 1

def left(node, coords, state):
    i = coords[0]
    j = coords[1]
    if i == 0 or i == 8 or i == 16 or i == 24:
        return False
    else:
        lst = list(node)
        lst[i], lst[j] = lst[i-2], lst[j-2]
        lst[i-2], lst[j-2] = '_','_'
        left = ''.join(lst)
        if dup(left) == 1:
            storage.append(left)
            return True
        else:
            return False

def right(node, coords, state):
    i = coords[0]
    j = coords[1]
    if i == 6 or i == 14 or i == 22 or i == 30:
        return False
    else:
        lst = list(node)
        lst[i], lst[j] = lst[i+2], lst[j+2]
        lst[i+2], lst[j+2] = '_','_'
        right = ''.join(lst)
        if dup(right) == 1:
            storage.append(right)
            return True
        else:
            return False

def down(node, coords, state):
    i = coords[0]
    j = coords[1]
    if i == 24 or i == 26 or i == 28 or i == 30:
        return False
    else:
        lst = list(node)
        lst[i], lst[j] = lst[i+8], lst[j+8]
        lst[i+8], lst[j+8] = '_','_'
        down = ''.join(lst)
        if dup(down) == 1:
            storage.append(down)
            return True
        else:
            return False

def up(node, coords, state):
    i = coords[0]
    j = coords[1]
    if i == 0 or i == 2 or i == 4 or i == 6:
        return False
    else:
        lst = list(node)
        lst[i], lst[j] = lst[i-8], lst[j-8]
        lst[i-8], lst[j-8] = '_','_'
        up = ''.join(lst)
        if dup(up) == 1:
            storage.append(up)
            return True
        else:
            return False

while True:
    current = storage[count]
    blank = blank_loc(current)
    tree[count] = []
    
    if left(current, blank, state):
        tree[count].append(state)
        state += 1
    if right(current, blank, state):
        tree[count].append(state)
        state += 1
    if up(current, blank, state):
        tree[count].append(state)
        state += 1
    if down(current, blank, state):
        tree[count].append(state)
        state += 1
    if current == end_state:
        print('Goal reached!')
        print('Tested', storage.index(current), 'states')
        print(len(storage) - storage.index(current), 'states still queued')
        break
    
    if len(storage) == 1000000:
        print('Stack Capacity Reached. No solution')
        print(len(storage))
        break
    
    if (time.time() - start_time) == 3:
        print("Program ran for %s hours" % ((time.time() - start_time)/3600)) 
        break
  
    count += 1 #update count {key}

if initial_state == initial_state1:
    state_num = '1'
elif initial_state == initial_state2:
    state_num = '2'
elif initial_state == initial_state3:
    state_num = '3'
elif initial_state == initial_state4:
    state_num = '4'
else:
    state_num = '5'

file1 = open("Project_1_661.txt","w")  
file1.write("Stored Configurations of initial state " + state_num + ": \n") 
for line in storage:
  file1.write(line)
  file1.write("\n")
file1.close()
  
print('Would you like to access configuration storage? (y/n)')
if input() == 'y':
    print('Retriving Tree')
    print(tree)
    print('Which parent do you want to see?')
    x = int(input())
    print('You have selected parent', x, 'Which child do you want to see?')
    print(tree[x])
    y = int(input())
    print('Parent', x, 'Child', y)
    print(storage[tree[x][tree[x].index(y)]])
    
else:
    print('Thank you')
